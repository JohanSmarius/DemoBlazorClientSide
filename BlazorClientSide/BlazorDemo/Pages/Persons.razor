@page "/persons"
@using BlazorDemo.Services
@using Core.Domain

@inject IPersonService PersonService
@inject IJSInterop JSInterop

@inject IUriHelper UriHelper

<div class="alert alert-success">
    <strong>@WelcomeMessage</strong>
</div>

<section>
    <header>Users</header>
    <article>
        @foreach (var person in AvailableUsers)
        {
            <PersonDetail person="person">
                <button class="btn btn-success" onclick="@(() => Select(person))">Select</button>
                <button class="btn btn-success" onclick="@(() => Edit(person))">Edit</button>
                <button class="btn btn-success" onclick="@(() => Delete(person))">Delete</button>
            </PersonDetail>
        }
    </article>
</section>

@if (SelectedUser != null)
{
    <div class="container">
        <div class="row">
            <label for="name">Name: </label>
            <input id="name" bind="@SelectedUser.Name"/>
        </div>
    </div>
}


@functions
{

    string WelcomeMessage = "Welcome DotNED Saturday From Blazor!";
    User SelectedUser { get; set; }

    List<User> AvailableUsers = new List<User>();

    protected override async Task OnInitAsync()
    {
        await PersonService.LoadUsers();
        AvailableUsers = PersonService.AvailableUsers;
    }

    void Select(User selectedUser)
    {
        SelectedUser = selectedUser;
        StateHasChanged();
    }

    void Edit(User selectedUser)
    {
        UriHelper.NavigateTo($"/PersonEdit/{selectedUser.Id}");
    }

    async Task Delete(User selectedUser)
    {
        var confirm = await JSInterop.Confirm($"Are you sure to delete {selectedUser.Name}");


        if (confirm)
        {
            PersonService.AvailableUsers.Remove(selectedUser);
            AvailableUsers = PersonService.AvailableUsers;
            StateHasChanged();
        }
    }

}
